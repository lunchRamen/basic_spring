스프링 기본 5일차

__________________________________________________________________________________________________


스프링 컨테이너와 스프링 빈


드디어 순수자바를 스프링으로 옮겨보는 시간.


스프링 컨테이너 생성

생성 과정
ApplicationContext applicationContext=
new AnnotationConfigApplicationContext(AppConfig.class);

이런식으로 생성

ApplicationContext=스프링 컨테이너.=인터페이스.->다형성 적용.
정확히는 +BeanFactory(나중에 설명)

AnnotationConfigApplicationContext구현체가 이거인거임.
(AppConfig에서 어노테이션으로 앱의 문맥구분을 구현했으니까)

요즘 대부분 어노테이션 기반 자바클래스로 설정함.


스프링 컨테이너 생성과정

1.AnnotationConfigApplicationContext(AppConfig.class);
->스프링 컨테이너 생성

스프링 컨테이너에는 "스프링 빈 저장소"가 있음.
빈 저장소는 빈 이름, 빈 객체를 저장해둠.
그래서 AppConfig의 Bean어노테이션이 있는거.


2.스프링 컨테이너에서 @Bean어노테이션을 순서대로 읽어서
빈 저장소에 빈을 저장.
빈 이름: 메서드 이름
빈 객체:메서드의 주소.

빈 이름은 항상 "unique"(중복 x)



3.스프링 빈 의존관계 설정 "준비"

빈 객체들이 다 생성되면, 설정정보를 참고하여(코드) 각 빈들의 의존관계를 주입해준다.
단순한 자바코드와 "싱글톤 컨테이너"를 사용한다는 점에서 다르다.

스프링은 빈을 생성///의존관계 주입
이렇게 단계가 나뉘어져있음.

자바코드에선 객체 생성+의존성 주입이 같이 일어남.

왜 객체 생성/의존관계 주입을 분리해서 설정하는지는 나중에 설명.



__________________________________________________________________________________________________



컨테이너에 등록된 모든 빈 조회

테스트코드에서 제대로 작동되는지 확인.

**개꿀팁
자바 for-each문 자동 생성
->iter+tab->그 상황에 알맞는 foreach문 자동 생성됨;;

**개개꿀팁
System.out.println 축약형: soutv 앞으로 꼭 쓰길.. 

**개개꿀팁
코드 복붙하고싶으면 ctrl c ctrl v하는데
드래그해서 ctrl d하면 자동생성됨;;

AnnotationConfigApplicationContext ac=
new AnnotationConfigApplicationContext(AppConfig.class);

    void findAllBean(){
        String[] beanDefinitionNames = ac.getBeanDefinitionNames();

        for (String beanDefinitionName : beanDefinitionNames) {
            Object bean = ac.getBean(beanDefinitionName);
            System.out.println("name = "+beanDefinitionName+" object = "+bean);
        }
    }

이런 형식으로 빈이 생성됐는지 확인하는 코드 만들면 됨.

근데 이러면, 내가 만든것 뿐만 아니라 스프링 실행시 자동으로 생성되는 빈들도 따라 출력됨.

내가 만들어서 넣은것만 출력하려면


    void findApplicationBean(){
        String[] beanDefinitionNames = ac.getBeanDefinitionNames();

        for (String beanDefinitionName : beanDefinitionNames) {
            BeanDefinition beanDefinition = ac.getBeanDefinition(beanDefinitionName);

            if(beanDefinition.getRole() == BeanDefinition.ROLE_APPLICATION){
                Object bean = ac.getBean(beanDefinitionName);
                System.out.println("name = "+beanDefinitionName+" object = "+bean);
            }
        }
    }

요런식으로 getRole 조건문이 추가되면 된다.

ROLE_APPLICATION : 일반적으로 사용자가 정의한 빈
ROLE_INFRASTRUCTURE : 스프링이 내부에서 사용하는 빈




__________________________________________________________________________________________________

스프링 컨테이너에서 빈을 찾는 기본적인 방법(findByAll이 아닌 특정 빈)

**꿀팁
ctrl+e+enter -> 내가 작성한 바로 이전 클래스로 이동 가능(매우 유용)


빈의 구성요소
1.이름
    @Test
    @DisplayName("빈 이름으로 조회")
    void findBeanByName(){
        MemberService memberService = ac.getBean("memberService", MemberService.class);
        Assertions.assertThat(memberService).isInstanceOf(MemberServiceImpl.class);
    }
2.객체(=클래스의 타입)
    @DisplayName("타입으로만 조회")
    void findBeanByType(){
        MemberService memberService = ac.getBean(MemberService.class);
        Assertions.assertThat(memberService).isInstanceOf(MemberServiceImpl.class);
    }

3.인터페이스를 구현한 객체인 경우, 구현체를 직접 넣어도 됨.
    @Test
    @DisplayName("구현체로 조회")
    void findBeanByName2(){
        MemberService memberService = ac.getBean("memberService", MemberServiceImpl.class);
        Assertions.assertThat(memberService).isInstanceOf(MemberServiceImpl.class);
    }

3번보단 2번이(역할로 알수 있으면 더 좋다.)


예외 케이스 생성에 있어선
Assertions(core가 아닌 jupiter API)
org.junit.jupiter.api.Assertions.assertThrows(NoSuchBeanDefinitionException.class,
                ()->ac.getBean("xxxxx", MemberService.class));
이렇게 해당 예외케이스가 터지는지 람다함수를 통해 만들어서 확인해보면 된다.



__________________________________________________________________________________________________


스프링 빈 조회(동일한 타입이 2개 이상인 경우)


2번 타입으로 조회시 같은 타입인 빈이 둘 이상이면 예외 발생.
이때는 빈 이름을 지정함으로써 해결.


빈의 구성요소가 이름과 객체였고, 이름은 유니크하게 만들어야한다는 특성으로
해결하는것.

같은 클래스(객체,인스턴스)타입을 반환하더라도, 메서드명은 항상 다르게 설정
해줘야 name의 유일성이 보장되기때문.

    void findByBeanName(){
        MemberRepository memberRepository=ac.getBean("memberRepository1",MemberRepository.class);
        org.assertj.core.api.Assertions.assertThat(memberRepository).isInstanceOf(MemberRepository.class);
    }

그래서 빈 조회시 이름으로 조회하는게 가장 확실하고,

같은 returnType을 가진 빈들을 조회하려면
ac.getBeansOfType(MemberRepository.class) 후 ctrl + alt +v하면
알아서 인스턴스를 만들어주는데, 이게 Map형태임
->이름은 유니크해야된다.










































































